// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: pb/task/task.proto

package task

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	RequestFromClient(ctx context.Context, in *RequestFromClientRequest, opts ...grpc.CallOption) (*RequestFromClientResponse, error)
	RequestFromServer(ctx context.Context, opts ...grpc.CallOption) (Task_RequestFromServerClient, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) RequestFromClient(ctx context.Context, in *RequestFromClientRequest, opts ...grpc.CallOption) (*RequestFromClientResponse, error) {
	out := new(RequestFromClientResponse)
	err := c.cc.Invoke(ctx, "/task.Task/RequestFromClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) RequestFromServer(ctx context.Context, opts ...grpc.CallOption) (Task_RequestFromServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Task_ServiceDesc.Streams[0], "/task.Task/RequestFromServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskRequestFromServerClient{stream}
	return x, nil
}

type Task_RequestFromServerClient interface {
	Send(*RequestFromServerResponse) error
	Recv() (*RequestFromServerRequest, error)
	grpc.ClientStream
}

type taskRequestFromServerClient struct {
	grpc.ClientStream
}

func (x *taskRequestFromServerClient) Send(m *RequestFromServerResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskRequestFromServerClient) Recv() (*RequestFromServerRequest, error) {
	m := new(RequestFromServerRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility
type TaskServer interface {
	RequestFromClient(context.Context, *RequestFromClientRequest) (*RequestFromClientResponse, error)
	RequestFromServer(Task_RequestFromServerServer) error
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (UnimplementedTaskServer) RequestFromClient(context.Context, *RequestFromClientRequest) (*RequestFromClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFromClient not implemented")
}
func (UnimplementedTaskServer) RequestFromServer(Task_RequestFromServerServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestFromServer not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_RequestFromClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFromClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).RequestFromClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/RequestFromClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).RequestFromClient(ctx, req.(*RequestFromClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_RequestFromServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServer).RequestFromServer(&taskRequestFromServerServer{stream})
}

type Task_RequestFromServerServer interface {
	Send(*RequestFromServerRequest) error
	Recv() (*RequestFromServerResponse, error)
	grpc.ServerStream
}

type taskRequestFromServerServer struct {
	grpc.ServerStream
}

func (x *taskRequestFromServerServer) Send(m *RequestFromServerRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskRequestFromServerServer) Recv() (*RequestFromServerResponse, error) {
	m := new(RequestFromServerResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestFromClient",
			Handler:    _Task_RequestFromClient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestFromServer",
			Handler:       _Task_RequestFromServer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/task/task.proto",
}
