// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: pb/task_forward/task_forward.proto

package task_forward

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskForwardClient is the client API for TaskForward service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskForwardClient interface {
	Unary(ctx context.Context, opts ...grpc.CallOption) (TaskForward_UnaryClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (TaskForward_ClientStreamClient, error)
}

type taskForwardClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskForwardClient(cc grpc.ClientConnInterface) TaskForwardClient {
	return &taskForwardClient{cc}
}

func (c *taskForwardClient) Unary(ctx context.Context, opts ...grpc.CallOption) (TaskForward_UnaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskForward_ServiceDesc.Streams[0], "/taskforward.TaskForward/Unary", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskForwardUnaryClient{stream}
	return x, nil
}

type TaskForward_UnaryClient interface {
	Send(*UnaryResponse) error
	Recv() (*UnaryRequest, error)
	grpc.ClientStream
}

type taskForwardUnaryClient struct {
	grpc.ClientStream
}

func (x *taskForwardUnaryClient) Send(m *UnaryResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskForwardUnaryClient) Recv() (*UnaryRequest, error) {
	m := new(UnaryRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskForwardClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (TaskForward_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskForward_ServiceDesc.Streams[1], "/taskforward.TaskForward/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskForwardClientStreamClient{stream}
	return x, nil
}

type TaskForward_ClientStreamClient interface {
	Send(*ClientStreamResponse) error
	Recv() (*ClientStreamRequest, error)
	grpc.ClientStream
}

type taskForwardClientStreamClient struct {
	grpc.ClientStream
}

func (x *taskForwardClientStreamClient) Send(m *ClientStreamResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskForwardClientStreamClient) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskForwardServer is the server API for TaskForward service.
// All implementations must embed UnimplementedTaskForwardServer
// for forward compatibility
type TaskForwardServer interface {
	Unary(TaskForward_UnaryServer) error
	ClientStream(TaskForward_ClientStreamServer) error
	mustEmbedUnimplementedTaskForwardServer()
}

// UnimplementedTaskForwardServer must be embedded to have forward compatible implementations.
type UnimplementedTaskForwardServer struct {
}

func (UnimplementedTaskForwardServer) Unary(TaskForward_UnaryServer) error {
	return status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedTaskForwardServer) ClientStream(TaskForward_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedTaskForwardServer) mustEmbedUnimplementedTaskForwardServer() {}

// UnsafeTaskForwardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskForwardServer will
// result in compilation errors.
type UnsafeTaskForwardServer interface {
	mustEmbedUnimplementedTaskForwardServer()
}

func RegisterTaskForwardServer(s grpc.ServiceRegistrar, srv TaskForwardServer) {
	s.RegisterService(&TaskForward_ServiceDesc, srv)
}

func _TaskForward_Unary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskForwardServer).Unary(&taskForwardUnaryServer{stream})
}

type TaskForward_UnaryServer interface {
	Send(*UnaryRequest) error
	Recv() (*UnaryResponse, error)
	grpc.ServerStream
}

type taskForwardUnaryServer struct {
	grpc.ServerStream
}

func (x *taskForwardUnaryServer) Send(m *UnaryRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskForwardUnaryServer) Recv() (*UnaryResponse, error) {
	m := new(UnaryResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TaskForward_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskForwardServer).ClientStream(&taskForwardClientStreamServer{stream})
}

type TaskForward_ClientStreamServer interface {
	Send(*ClientStreamRequest) error
	Recv() (*ClientStreamResponse, error)
	grpc.ServerStream
}

type taskForwardClientStreamServer struct {
	grpc.ServerStream
}

func (x *taskForwardClientStreamServer) Send(m *ClientStreamRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskForwardClientStreamServer) Recv() (*ClientStreamResponse, error) {
	m := new(ClientStreamResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskForward_ServiceDesc is the grpc.ServiceDesc for TaskForward service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskForward_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskforward.TaskForward",
	HandlerType: (*TaskForwardServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Unary",
			Handler:       _TaskForward_Unary_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _TaskForward_ClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/task_forward/task_forward.proto",
}
